==========================================
Demographics file structure and parameters
==========================================

The parameters described in this reference section can be added to the :term:`JavaScript Object
Notation (JSON)` formatted demographics file to determine the demographics of the population within
each geographic :term:`node` in a simulation. For example, the number of individuals and the
distribution for age, gender, immunity, risk, and mortality. This is in contrast to the
configuration parameters related to demographics that are simulation-wide and generally control
whether certain events, such as births or deaths, are enabled in a simulation.

At least one demographics file is required for every simulation unless you set the parameter
**Enable_Demographics_Builtin** to 0 (zero) in the :term:`configuration file`. This is generally
only used for testing and validating code pathways by using a standard testing sandbox instead of
actual demographics information. If **Migration_Model** is set to "FIXED_RATE_MIGRATION", built-in
demographics will use a form of local migration where individuals migrate only to adjacent nodes.

Demographics files are usually the only input data file you will modify. Demographics files are
named using the name of the region, appended with "_demographics.json".

Additionally, you can use more than one demographics file, with one serving as the base layer and
the one or more others acting as overlays that override the values in the base layer.

.. contents:: Contents
   :local:

Demographic file structure
==========================

Demographics files are organized into three sections:

Metadata
    Information such as data source, created date or region name. Metadata is used to provide
    provenance information.
Defaults
    Default parameter values applied to all nodes.
Nodes
    Parameter values specific to individual geographic nodes, which override the default values.
    There is one entry for each node in the simulation.

The following example shows the skeletal format of a demographics file.

.. literalinclude:: ../json/demographics-skeletal.json
   :language: json

Metadata
--------

Most of the items in the **Metadata** section informational only and are not used by |EMOD_s|. This
includes information such as author, date created, and tool used to create the file. However,
the following two values are used by |EMOD_s|:

NodeCount
    The number of nodes to expect in the demographics file.
IdReference
    The unique string that indicates the method used for generating the **NodeID**, the
    identifier used for each node in the simulation.

.. only:: not training

    See :doc:`file-inputs` for more information about **IdReference** and **NodeID** generation.

Defaults
--------

Parameter values in the **Defaults** section is applied to all nodes. However, any node-level
information provided in the **Nodes** section will take precedence for that node. The
**Defaults** section is optional and can be completely omitted, as is often the case of single-
node simulations. The **Defaults** section can contain any of the parameters listed below.

Nodes
-----

Parameter values in the **Nodes** section is applied to specific nodes. The intent of the **Nodes**
section is to have only the information that is unique to each node, such as identifier and
location (longitude and latitude). The section contains an array with each element in the array
representing a node that is identified by its **NodeID**. The **NodeID** is a unique integer
value. If a parameter appears in both the **Defaults** and **Nodes** sections, the value in the
**Nodes** section will take precedence.

.. only:: STI or HIV or training

    The **Nodes** section can contain any of the parameters listed below, except for the
    **Society** parameters that can only be applied in the **Defaults** section.

Parameters
==========

The demographic parameters are divided into the following broad categories. The parameters will
be contained in a nested JSON object of the same name.

.. include:: ../reuse/warning-case.txt

.. _demo-nodeattributes:

NodeAttributes
--------------

**NodeAttributes** are a JSON object that contains parameters that add or modify information
regarding the location, migration, habitat, and population of a simulation. Some **NodeAttributes**
depend on values set in the configuration parameters.

.. TODO we need a better way to version these.

.. only:: generic or training

    .. csv-table::
       :header: Parameter, Data type, Minimum, Maximum, Default, Description, Example
       :widths: 10, 5, 5, 5, 5, 20, 5
       :file: ../csv/generic-demographics-nodeattributes.csv

.. only:: malaria or vector or training

    .. csv-table::
       :header: Parameter, Data type, Minimum, Maximum, Default, Description, Example
       :widths: 10, 5, 5, 5, 5, 20, 5
       :file: ../csv/malaria-demographics-nodeattributes.csv

.. _demo-individualattributes:

IndividualAttributes
--------------------

**IndividualAttributes** are a JSON object that contains parameters that add or modify the
distribution of attributes across individuals in a simulation. For example, the age or immunity
distribution. An initial value for an individual is a randomly selected value from a distribution.
For example, if you use a uniform distribution to initialize age, the initial ages of individuals in
the simulation will be evenly distributed between some minimum and maximum value.

There are two types of distributions: simple and complex. Simple distributions are defined by three
parameters where one is the distribution type and the other two are used to further define the
distribution. You can use complex distributions to define a distribution that does not fit some
standard. For example, a complex distribution is useful when trying to represent real-world data.

The table below shows the simple distributions and their associated parameters.

.. csv-table::
   :header: Distribution, Demographic parameters, Related configuration parameters
   :widths: 5, 10, 10

   Age, "* AgeDistributionFlag
   * AgeDistribution1
   * AgeDistribution2", "**Age_Initialization_Distribution_Type** must be set to ""DISTRIBUTION_SIMPLE""."
   Prevalence, "* PrevalenceDistributionFlag
   * PrevalenceDistribution1
   * PrevalenceDistribution2", "**Enable_Demographics_Other** must be set to 1."
   Immunity, "* ImmunityDistributionFlag
   * ImmunityDistribution1
   * ImmunityDistribution2", ""
   Risk, "* RiskDistributionFlag
   * RiskDistribution1
   * RiskDistribution2", "**Enable_Demographics_Other** must be set to 1."
   Migration heterogeneity, "* MigrationHeterogeneityDistributionFlag
   * MigrationHeterogeneityDistribution1
   * MigrationHeterogeneityDistribution2", "**Enable_Migration_Heterogeneity** must be set to 1."

The table below shows the available probability distribution types to use with simple distributions
and how to set the other two demographic parameters to initialize the distribution.

.. csv-table::
   :header: Distribution type, Flag value, Distribution1 value, Distribution2 value
   :widths: 5, 5, 10, 10

   Constant, 0, Value, N/A (set to 0)
   Uniform, 1, Minimum, Maximum
   Gaussian, 2, Mean, Standard deviation
   Exponential, 3, Mean, N/A (set to 0)
   Poisson, 4, Mean, N/A (set to 0)
   Log normal, 5, Mean, Log (standard deviation)
   Bimodal, 6, Proportion of time to return the value specified by Distribution2. Value must be between 0 and 1., "A positive value to be returned. If the value is not positive, a value of 1 is returned."
   Weibull, 7, Scale parameter, Shape parameter

|EMOD_s| also supports the following complex distributions:

* AgeDistribution
* FertilityDistribution
* MortalityDistribution
* MortalityDistributionMale
* MortalityDistributionFemale
* HIVCoinfectionDistribution
* HIVMortalityDistribution
* MSP_mean_antibody_distribution
* nonspec_mean_antibody_distribution
* PfEMP1_mean_antibody_distribution
* MSP_variance_antibody_distribution
* nonspec_variance_antibody_distribution Malaria
* PfEMP1_variance_antibody_distribution

.. TODO add more information about how to use complex distributions

.. _demo-individualproperties:

IndividualProperties
--------------------

**IndividualProperties** are a JSON array that contains parameters that add properties to
individuals in a simulation as a means of setting up groups. For example, you can define values for
accessibility, age, geography, risk, and other properties and assign individuals to different groups
based on those property values.

.. csv-table::
   :header: Parameter, Data type, Description, Example
   :widths: 5, 5, 15, 10
   :file: ../csv/generic-demographics-individualproperties.csv

The following table contains the parameters that are available to use in the **Transitions**
array.

.. csv-table::
   :header: Parameter, Data type, Description, Example
   :widths: 5, 5, 15, 10
   :file: ../csv/generic-demographics-individualproperties-transition.csv

Example
=======

The example below shows a complete multi-node demographics file that uses a gridded **IdReference**
type.

.. literalinclude:: ../json/parameter-demographics-example.json
   :language: json

